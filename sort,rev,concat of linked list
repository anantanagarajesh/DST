#include<stdio.h>
#include<stdlib.h>

int count = 0;
struct node{
    int data;
    struct node* next;
};

struct node* head1 = NULL;
struct node* head2=NULL;

struct node* create_node(){
    struct node* temp=(struct node*)malloc(sizeof(struct node));
    printf("Enter element to be inserted: \n");
    scanf("%d",&(temp->data));
    temp->next=NULL;
    return temp;
}


void add_end(){
    if(head1==NULL){
        head1=create_node();
    }else{
        struct node* temp=create_node();
        temp->next=head1;
        head1=temp;
    }
}

void add_end1(){
    if(head2==NULL){
        head2=create_node();
    }else{
        struct node* temp=create_node();
        temp->next=head2;
        head2=temp;
    }
}

void display(){
    if(head1==NULL){
        printf("No elements have been inserted, list is empty");
    }else{
    struct node* i=head1;
    while (i->next!=NULL)
    {
        printf("%d  ",i->data);
        i=i->next;
    }
    printf("%d  ",i->data);
    printf("\n");
    }
}

 void sort() {
        struct node *current = head1, *index = NULL;
        int temp;

        if(head1 == NULL) {
            return;
        }
        else {
            while(current != NULL) {
                index = current->next;

                while(index != NULL) {
                    if(current->data > index->data) {
                        temp = current->data;
                        current->data = index->data;
                        index->data = temp;
                    }
                    index = index->next;
                }
                current = current->next;
            }
        }
    }

void merge()
{
    struct node *temp;
    temp=head1;
    while (temp->next!=NULL)
        temp=temp->next;
    temp->next=head2;
    printf("Lists are merged\n");
}

void reverse()
{
    struct node *curr=head1, *next=NULL, *prev=NULL;
    while(curr!=NULL)
    {
        next=curr->next;
        curr->next=prev;
        prev=curr;
        curr=next;
    }
    head1=prev;
}

int main (){
    int choice,k;
    while (1){
        printf("\n1:Insert \n2:Display\n3:Exit\n4:Reverse\n5:Merge\n6:Sort\n\n");
        scanf("%d", &choice);

    switch (choice){

        case 1:
        add_end();
        break;

        case 2:display ();
        break;

        case 3:exit(0);
        break;

        case 4:reverse();
        break;

        case 5:
        while (k==0){
            printf ("\n1:Insert element of second list:\n2:Exit\n");
            scanf ("%d", &choice);
            switch (choice){
                case 1:
                add_end1();
                break;

                case 2:k=1;
                break;

            default:printf ("Invalid input!\n");
            break;
            }
        }
        merge();
        break;

        case 6:sort();
        display ();
        break;

        default:printf ("Invalid input!\n");
        break;
    }
    }
    return 0;
}
